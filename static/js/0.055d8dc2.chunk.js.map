{"version":3,"sources":["../../src/utils/isCheckBoxInput.ts","../../src/utils/isDateObject.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/logic/getEventValue.ts","../../src/logic/isNameInFieldArray.ts","../../src/logic/getNodeParentName.ts","../../src/utils/compact.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/constants.ts","../../src/utils/omit.ts","../../src/logic/getProxyFormState.ts","../../src/useFormContext.tsx","../../src/utils/isEmptyObject.ts","../../src/logic/shouldRenderFormState.ts","../../src/utils/convertToArrayPayload.ts","../../src/useSubscribe.ts","../../src/utils/isString.ts","../../src/logic/generateWatchOutput.ts","../../src/utils/isFunction.ts","../../src/utils/objectHasFunction.ts","../../src/logic/appendErrors.ts","../../src/utils/isKey.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/focusFieldBy.ts","../../src/logic/isWatched.ts","../../src/utils/cloneObject.ts","../../src/utils/createSubject.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepEqual.ts","../../src/utils/getValidationModes.ts","../../src/utils/isBoolean.ts","../../src/utils/isFileInput.ts","../../src/utils/isHTMLElement.ts","../../src/utils/isMultipleSelect.ts","../../src/utils/isRadioInput.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/utils/isWeb.ts","../../src/utils/live.ts","../../src/utils/unset.ts","../../src/logic/getDirtyFields.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValueAs.ts","../../src/logic/getRadioValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getResolverOptions.ts","../../src/utils/isRegex.ts","../../src/logic/getRuleValue.ts","../../src/logic/hasValidation.ts","../../src/logic/schemaErrorLookup.ts","../../src/logic/skipValidation.ts","../../src/logic/unsetEmptyArray.ts","../../src/utils/isMessage.ts","../../src/logic/getValidateError.ts","../../src/logic/getValueAndMessage.ts","../../src/logic/validateField.ts","../../src/logic/createFormControl.ts","../../src/useForm.ts","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js"],"names":["element","type","value","Date","isObjectType","isNullOrUndefined","Array","isArray","isDateObject","event","isObject","target","isCheckBoxInput","checked","names","name","some","current","substring","search","getNodeParentName","filter","Boolean","val","undefined","obj","path","defaultValue","result","compact","split","reduce","key","isUndefined","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","source","copy","createContext","formState","_proxyFormState","localProxyFormState","isRoot","Object","defineProperty","get","_key","keys","length","formStateData","omit","isEmptyObject","find","useSubscribe","props","_props","useRef","useEffect","subscription","disabled","subject","subscribe","next","callback","unsubscribe","tearDown","_names","formValues","isGlobal","isString","watch","add","map","fieldName","watchAll","data","isFunction","validateAllFieldCriteria","errors","message","types","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","field","_f","ref","focus","refs","isBlurEvent","has","watchName","startsWith","slice","cloneObject","Set","createSubject","_observers","observers","observer","push","o","deepEqual","object1","object2","isPrimitive","getTime","keys1","keys2","val1","includes","val2","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","HTMLElement","isRadioInput","window","document","isHTMLElement","isConnected","unset","previousObjRef","updatePath","childObject","baseGet","k","objectRef","currentPaths","currentPathsLength","item","isBoolean","markFieldsDirty","isParentNodeArray","objectHasFunction","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","defaultValues","defaultResult","isValid","validResult","options","values","option","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","every","isFileInput","files","getRadioValue","isMultipleSelect","selectedOptions","isCheckBox","getCheckboxValue","getFieldValueAs","_fields","criteriaMode","shouldUseNativeValidation","RegExp","rule","isRegex","mount","required","min","max","maxLength","minLength","pattern","validate","schemaErrorLookup","error","join","foundError","pop","isTouched","isSubmitted","reValidateMode","isValidElement","getValidateError","isMessage","validationData","inputValue","inputRef","setCustomValidity","reportValidity","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","defaultOptions","shouldFocusError","createFormControl","delayErrorCallback","_options","_formState","isDirty","isValidating","dirtyFields","submitCount","touchedFields","isSubmitting","isSubmitSuccessful","_defaultValues","_formValues","shouldUnregister","_stateFlags","action","unMount","array","timer","validateFields","_subjects","state","validationModeBeforeSubmit","getValidationModes","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","wait","args","clearTimeout","setTimeout","_updateValid","shouldSkipRender","resolver","_executeSchema","executeBuildInValidation","_updateFieldArray","method","shouldSetValues","shouldUpdateFieldsAndErrors","fieldValues","argA","argB","unsetEmptyArray","getDirtyFields","_getDirty","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","isFieldDirty","output","isPreviousFieldTouched","isPreviousFormDirty","isPreviousFieldDirty","shouldRenderByError","fieldState","previousFieldError","shouldUpdateValid","delayError","updatedFormState","v","context","getResolverOptions","executeSchemaAndUpdateState","shouldOnlyCheckValid","valid","fieldReference","validateField","fieldError","_removeUnmounted","live","unregister","getValues","_getWatch","generateWatchOutput","_getFieldArray","isWeb","forEach","selectRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","isFieldArray","cloneValue","isWatched","onChange","getEventValue","shouldSkipValidation","hasValidation","deps","skipValidation","watched","onBlur","previousErrorLookupResult","errorLookupResult","fieldNames","convertToArrayPayload","Promise","all","shouldFocus","getFieldState","invalid","clearErrors","inputName","setError","info","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","register","disabledIsDefined","getRuleValue","fieldRef","querySelectorAll","radioOrCheckbox","concat","isNameInFieldArray","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","resetField","reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","closest","keepSubmitCount","keepIsSubmitted","entries","keepErrors","setFocus","shouldSelect","select","control","useForm","_formControl","useState","updateFormState","useCallback","shouldRenderFormState","getProxyFormState","_toConsumableArray","arr","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError","_createForOfIteratorHelper","allowArrayLike","it","i","F","s","n","done","_e","f","err","normalCompletion","didErr","call","step","_e2"],"mappings":"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","file":"static/js/0.055d8dc2.chunk.js","sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (value: unknown): value is Date => value instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","export default <TValue>(value: TValue[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(obj: T, path: string, defaultValue?: unknown): any => {\n  if (!path || !isObject(obj)) {\n    return defaultValue;\n  }\n\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) =>\n      isNullOrUndefined(result) ? result : result[key as keyof {}],\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path as keyof T])\n      ? defaultValue\n      : obj[path as keyof T]\n    : result;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  FOCUS_OUT: 'focusout',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import { VALIDATION_MODE } from '../constants';\nimport { FormState, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  const result = {} as typeof formState;\n\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: () => {\n        const _key = key as keyof FormState<TFieldValues> & keyof ReadFormState;\n\n        if (_proxyFormState[_key] !== VALIDATION_MODE.all) {\n          _proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n        }\n\n        localProxyFormState && (localProxyFormState[_key] = true);\n        return formState[_key];\n      },\n    });\n  }\n\n  return result;\n};\n","import React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(HookFormContext) as unknown as UseFormReturn<TFieldValues>;\n\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useFrom methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext extends object = object,\n>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => (\n  <HookFormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </HookFormContext.Provider>\n);\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import React from 'react';\n\nimport { Subject, Subscription } from './utils/createSubject';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  callback: (value: T) => void;\n};\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _props = React.useRef(props);\n  _props.current = props;\n\n  React.useEffect(() => {\n    const tearDown = (subscription: Subscription | false) => {\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n    };\n\n    const subscription =\n      !props.disabled &&\n      _props.current.subject.subscribe({\n        next: _props.current.callback,\n      });\n\n    return () => tearDown(subscription);\n  }, [props.disabled]);\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import { FieldValues, InternalFieldName, Names } from '../types';\nimport get from '../utils/get';\nimport isString from '../utils/isString';\n\nexport default (\n  names: string | string[] | undefined,\n  _names: Names,\n  formValues?: FieldValues,\n  isGlobal?: boolean,\n) => {\n  const isArray = Array.isArray(names);\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names as InternalFieldName);\n    return get(formValues, names as InternalFieldName);\n  }\n\n  if (isArray) {\n    return names.map(\n      (fieldName) => (\n        isGlobal && _names.watch.add(fieldName as InternalFieldName),\n        get(formValues, fieldName as InternalFieldName)\n      ),\n    );\n  }\n\n  isGlobal && (_names.watchAll = true);\n  return formValues;\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isFunction from './isFunction';\n\nexport default <T>(data: T): boolean => {\n  for (const key in data) {\n    if (isFunction(data[key])) {\n      return true;\n    }\n  }\n  return false;\n};\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import { InternalFieldName, Names } from '../types';\n\nexport default (\n  name: InternalFieldName,\n  _names: Names,\n  isBlurEvent?: boolean,\n) =>\n  !isBlurEvent &&\n  (_names.watchAll ||\n    _names.watch.has(name) ||\n    [..._names.watch].some(\n      (watchName) =>\n        name.startsWith(watchName) &&\n        /^\\.\\w+/.test(name.slice(watchName.length)),\n    ));\n","import isFunction from './isFunction';\nimport isObject from './isObject';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type Subscription = {\n  unsubscribe: Noop;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  subscribe: (value: Observer<T>) => Subscription;\n  unsubscribe: Noop;\n} & Observer<T>;\n\nexport default function createSubject<T>(): Subject<T> {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>): Subscription => {\n    _observers.push(observer);\n    return {\n      unsubscribe: () => {\n        _observers = _observers.filter((o) => o !== observer);\n      },\n    };\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: unknown): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && ref.isConnected;\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import deepEqual from '../utils/deepEqual';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\nimport isUndefined from '../utils/isUndefined';\nimport objectHasFunction from '../utils/objectHasFunction';\n\nfunction markFieldsDirty<U>(data: U, fields: Record<string, any> = {}) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        fields[key] = Array.isArray(data[key]) ? [] : {};\n        markFieldsDirty(data[key], fields[key]);\n      } else if (!isNullOrUndefined(data[key])) {\n        fields[key] = true;\n      }\n    }\n  }\n\n  return fields;\n}\n\nfunction getDirtyFieldsFromDefaultValues<T>(\n  data: T,\n  formValues: T,\n  dirtyFieldsFromValues: any,\n) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        if (\n          isUndefined(formValues) ||\n          isPrimitive(dirtyFieldsFromValues[key])\n        ) {\n          dirtyFieldsFromValues[key] = Array.isArray(data[key])\n            ? markFieldsDirty(data[key], [])\n            : { ...markFieldsDirty(data[key]) };\n        } else {\n          getDirtyFieldsFromDefaultValues(\n            data[key],\n            isNullOrUndefined(formValues) ? {} : formValues[key],\n            dirtyFieldsFromValues[key],\n          );\n        }\n      } else {\n        dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n      }\n    }\n  }\n\n  return dirtyFieldsFromValues;\n}\n\nexport default <T>(defaultValues: T, formValues: T) =>\n  getDirtyFieldsFromDefaultValues(\n    defaultValues,\n    formValues,\n    markFieldsDirty(formValues),\n  );\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field, NativeFieldValue } from '../types';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends NativeFieldValue>(\n  value: T,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate && isString(value)\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import {\n  ValidationRule,\n  ValidationValue,\n  ValidationValueMessage,\n} from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends ValidationValue>(\n  rule?: ValidationRule<T> | ValidationValueMessage<T>,\n) =>\n  isUndefined(rule)\n    ? undefined\n    : isRegex(rule)\n    ? rule.source\n    : isObject(rule)\n    ? isRegex(rule.value)\n      ? rule.value.source\n      : rule.value\n    : rule;\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup(\n  errors: FieldErrors,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name)).length && unset(ref, name);\n","import React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldError,\n  InternalFieldErrors,\n  Message,\n  NativeFieldValue,\n} from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async <T extends NativeFieldValue>(\n  field: Field,\n  inputValue: T,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidity = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue as number)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || +inputValue;\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue as string);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidity(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidity(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidity(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  EventType,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  Ref,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetFieldState,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormReset,\n  UseFormResetField,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckbox from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport set from '../utils/set';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport generateWatchOutput from './generateWatchOutput';\nimport getDirtyFields from './getDirtyFields';\nimport getEventValue from './getEventValue';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport getRuleValue from './getRuleValue';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport isWatched from './isWatched';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  };\n  let _fields = {};\n  let _defaultValues = _options.defaultValues || {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let delayErrorCallback: DelayCallback;\n  let timer = 0;\n  let validateFields: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(timer);\n      timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const _updateValid = async (shouldSkipRender?: boolean) => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuildInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    values = [],\n    method,\n    args,\n    shouldSetValues = true,\n    shouldUpdateFieldsAndErrors = true,\n  ) => {\n    if (args && method) {\n      _stateFlags.action = true;\n      if (shouldUpdateFieldsAndErrors && Array.isArray(get(_fields, name))) {\n        const fieldValues = method(get(_fields, name), args.argA, args.argB);\n        shouldSetValues && set(_fields, name, fieldValues);\n      }\n\n      if (\n        _proxyFormState.errors &&\n        shouldUpdateFieldsAndErrors &&\n        Array.isArray(get(_formState.errors, name))\n      ) {\n        const errors = method(\n          get(_formState.errors, name),\n          args.argA,\n          args.argB,\n        );\n        shouldSetValues && set(_formState.errors, name, errors);\n        unsetEmptyArray(_formState.errors, name);\n      }\n\n      if (\n        _proxyFormState.touchedFields &&\n        Array.isArray(get(_formState.touchedFields, name))\n      ) {\n        const touchedFields = method(\n          get(_formState.touchedFields, name),\n          args.argA,\n          args.argB,\n        );\n        shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n      }\n\n      if (_proxyFormState.dirtyFields) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n      }\n\n      _subjects.state.next({\n        isDirty: _getDirty(name, values),\n        dirtyFields: _formState.dirtyFields,\n        errors: _formState.errors,\n        isValid: _formState.isValid,\n      });\n    } else {\n      set(_formValues, name, values);\n    }\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => (\n    set(_formState.errors, name, error),\n    _subjects.state.next({\n      errors: _formState.errors,\n    })\n  );\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs: boolean,\n    value?: unknown,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(\n        _formValues,\n        name,\n        isUndefined(value) ? get(_defaultValues, name) : value,\n      );\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n\n      _stateFlags.mount && _updateValid();\n    }\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isBlurEvent?: boolean,\n    shouldDirty?: boolean,\n    shouldRender?: boolean,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let isFieldDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && (!isBlurEvent || shouldDirty)) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(\n        get(_defaultValues, name),\n        fieldValue,\n      );\n\n      isCurrentFieldPristine\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields as TFieldValues, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty =\n        isFieldDirty ||\n        isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isBlurEvent && !isPreviousFieldTouched) {\n      set(_formState.touchedFields as TFieldValues, name, isBlurEvent);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty =\n        isFieldDirty ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isBlurEvent);\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n\n    return isFieldDirty ? output : {};\n  };\n\n  const shouldRenderByError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback =\n        delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n        !isEmptyObject(fieldState) ||\n        shouldUpdateValid) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (\n      _proxyFormState.isValidating &&\n      !Object.values(validateFields).some((v) => v)\n    ) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      validateFields = {};\n    }\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) =>\n    _options.resolver\n      ? await _options.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          _options.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            _options.criteriaMode,\n            _options.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors as FieldErrors<TFieldValues>;\n    }\n\n    return errors;\n  };\n\n  const executeBuildInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (fieldReference) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, fieldReference.name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          );\n\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name]\n              ? set(\n                  _formState.errors,\n                  fieldReference.name,\n                  fieldError[fieldReference.name],\n                )\n              : unset(_formState.errors, fieldReference.name);\n          }\n        }\n\n        fieldValue &&\n          (await executeBuildInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(names)\n        ? { [names]: defaultValue }\n        : defaultValue),\n    };\n\n    return generateWatchOutput(names, _names, fieldValues, isGlobal);\n  };\n\n  const _getFieldArray = <TFieldArrayValues>(\n    name: InternalFieldName,\n  ): Partial<TFieldArrayValues>[] =>\n    compact(\n      get(\n        _stateFlags.mount ? _formValues : _defaultValues,\n        name,\n        props.shouldUnregister ? get(_defaultValues, name, []) : [],\n      ),\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        !fieldReference.disabled &&\n          set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : fieldReference.refs[0] &&\n                (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else if (isFileInput(fieldReference.ref)) {\n          fieldReference.ref.value = '';\n        } else {\n          fieldReference.ref.value = fieldValue;\n\n          if (!fieldReference.ref.type) {\n            _subjects.watch.next({\n              name,\n            });\n          }\n        }\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(\n        name,\n        fieldValue,\n        options.shouldTouch,\n        options.shouldDirty,\n        true,\n      );\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = <\n    T extends InternalFieldName,\n    K extends SetFieldValue<TFieldValues>,\n    U,\n  >(\n    name: T,\n    value: K,\n    options: U,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n    const cloneValue = cloneObject(value);\n\n    set(_formValues, name, cloneValue);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, cloneValue),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(cloneValue)\n        ? setValues(name, cloneValue, options)\n        : setFieldValue(name, cloneValue, options);\n    }\n\n    isWatched(name, _names) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const onChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type\n        ? getFieldValue(field._f)\n        : getEventValue(event);\n      const isBlurEvent =\n        event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const watched = isWatched(name, _names, isBlurEvent);\n\n      set(_formValues, name, fieldValue);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || watched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(watched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && watched && _subjects.state.next({});\n\n      validateFields[name] = validateFields[name] ? +1 : 1;\n\n      _subjects.state.next({\n        isValidating: true,\n      });\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(\n          _formState.errors,\n          _fields,\n          name,\n        );\n        const errorLookupResult = schemaErrorLookup(\n          errors,\n          _fields,\n          previousErrorLookupResult.name || name,\n        );\n\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps && trigger(field._f.deps as FieldPath<TFieldValues>[]);\n\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuildInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      !(!validationResult && !_formState.isValid) && _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver ? { isValid } : {}),\n      errors: _formState.errors,\n      isValidating: false,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const getFieldState: UseFormGetFieldState<TFieldValues> = (\n    name,\n    formState,\n  ) => ({\n    invalid: !!get((formState || _formState).errors, name),\n    isDirty: !!get((formState || _formState).dirtyFields, name),\n    isTouched: !!get((formState || _formState).touchedFields, name),\n    error: get((formState || _formState).errors, name),\n  });\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {} as FieldErrors<TFieldValues>);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(name)\n      ? _subjects.watch.subscribe({\n          next: (info) =>\n            name(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n              info as {\n                name?: FieldPath<TFieldValues>;\n                type?: EventType;\n                value?: unknown;\n              },\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    let field = get(_fields, name);\n    const disabledIsDefined = isBoolean(options.disabled);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    field\n      ? disabledIsDefined &&\n        set(\n          _formValues,\n          name,\n          options.disabled\n            ? undefined\n            : get(_formValues, name, getFieldValue(field._f)),\n        )\n      : updateValidAndValue(name, true, options.value);\n\n    return {\n      ...(disabledIsDefined ? { disabled: options.disabled } : {}),\n      ...(_options.shouldUseNativeValidation\n        ? {\n            required: !!options.required,\n            min: getRuleValue(options.min),\n            max: getRuleValue(options.max),\n            minLength: getRuleValue<number>(options.minLength) as number,\n            maxLength: getRuleValue(options.maxLength) as number,\n            pattern: getRuleValue(options.pattern) as string,\n          }\n        : {}),\n      name,\n      onChange,\n      onBlur: onChange,\n      ref: (ref: HTMLInputElement | null): void => {\n        if (ref) {\n          register(name, options);\n          field = get(_fields, name);\n\n          const fieldRef = isUndefined(ref.value)\n            ? ref.querySelectorAll\n              ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) || ref\n              : ref\n            : ref;\n          const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n          const refs = field._f.refs || [];\n\n          if (\n            radioOrCheckbox\n              ? refs.find((option: Ref) => option === fieldRef)\n              : fieldRef === field._f.ref\n          ) {\n            return;\n          }\n\n          set(_fields, name, {\n            _f: {\n              ...field._f,\n              ...(radioOrCheckbox\n                ? {\n                    refs: refs.concat(fieldRef).filter(live),\n                    ref: { type: fieldRef.type, name },\n                  }\n                : { ref: fieldRef }),\n            },\n          });\n\n          updateValidAndValue(name, false, undefined, fieldRef);\n        } else {\n          field = get(_fields, name, {});\n\n          if (field._f) {\n            field._f.mount = false;\n          }\n\n          (_options.shouldUnregister || options.shouldUnregister) &&\n            !(isNameInFieldArray(_names.array, name) && _stateFlags.action) &&\n            _names.unMount.add(name);\n        }\n      },\n    };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = cloneObject(_formValues);\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (_options.resolver) {\n          const { errors, values } = await _executeSchema();\n          _formState.errors = errors as FieldErrors<TFieldValues>;\n          fieldValues = values;\n        } else {\n          await executeBuildInValidation(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {} as FieldErrors<TFieldValues>,\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          if (onInvalid) {\n            await onInvalid({ ..._formState.errors }, e);\n          }\n\n          _options.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const resetField: UseFormResetField<TFieldValues> = (name, options = {}) => {\n    if (get(_fields, name)) {\n      if (isUndefined(options.defaultValue)) {\n        setValue(name, get(_defaultValues, name));\n      } else {\n        setValue(name, options.defaultValue);\n        set(_defaultValues, name, options.defaultValue);\n      }\n\n      if (!options.keepTouched) {\n        unset(_formState.touchedFields, name);\n      }\n\n      if (!options.keepDirty) {\n        unset(_formState.dirtyFields, name);\n        _formState.isDirty = options.defaultValue\n          ? _getDirty(name, get(_defaultValues, name))\n          : _getDirty();\n      }\n\n      if (!options.keepError) {\n        unset(_formState.errors, name);\n        _proxyFormState.isValid && _updateValid();\n      }\n\n      _subjects.state.next({ ..._formState });\n    }\n  };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n    const values =\n      formValues && !isEmptyObject(formValues)\n        ? cloneUpdatedValues\n        : _defaultValues;\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (isWeb && isUndefined(formValues)) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs)\n              ? field._f.refs[0]\n              : field._f.ref;\n\n            try {\n              isHTMLElement(fieldReference) &&\n                fieldReference.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n\n      _formValues = props.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneUpdatedValues;\n\n      _fields = {};\n\n      _subjects.array.next({\n        values,\n      });\n\n      _subjects.watch.next({\n        values,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n\n    _stateFlags.watch = !!props.shouldUnregister;\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? !deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? _formState.dirtyFields\n        : ((keepStateOptions.keepDefaultValues && formValues\n            ? Object.entries(formValues).reduce(\n                (previous, [key, value]) => ({\n                  ...previous,\n                  [key]: value !== get(_defaultValues, key),\n                }),\n                {},\n              )\n            : {}) as FieldNamesMarkedBoolean<TFieldValues>),\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      errors: keepStateOptions.keepErrors\n        ? _formState.errors\n        : ({} as FieldErrors<TFieldValues>),\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name)._f;\n    const fieldRef = field.refs ? field.refs[0] : field.ref;\n    options.shouldSelect ? fieldRef.select() : fieldRef.focus();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      getFieldState,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    resetField,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n    getFieldState,\n  };\n}\n","import React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport {\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\n/**\n * Custom hook to mange the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  const callback = React.useCallback(\n    (value) => {\n      if (shouldRenderFormState(value, control._proxyFormState, true)) {\n        control._formState = {\n          ...control._formState,\n          ...value,\n        };\n\n        updateFormState({ ...control._formState });\n      }\n    },\n    [control],\n  );\n\n  useSubscribe({\n    subject: control._subjects.state,\n    callback,\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}"],"sourceRoot":""}