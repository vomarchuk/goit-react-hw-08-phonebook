{"version":3,"sources":["components/NavBar/NavBar.module.css","components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css","components/Container/Container.module.css","components/Input/Input.module.css","components/Label/Label.module.css","components/Container/Container.js","components/Section/Section.js","components/NavBar/NavBar.js","components/Page/HomePage.js","redux/auth/auth-operations.js","components/Page/LoginPage.js","components/Page/RegisterPage.js","redux/contacts/contacts-action.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/Input/Input.js","components/Label/Label.js","components/options.js","components/ContactForm/ContactForm.js","components/Page/ContactsPage.js","components/App/App.js","redux/contacts/contacts-reducer.js","redux/auth/auth-slice.js","redux/store.js","index.js"],"names":["module","exports","Container","children","className","s","container","Section","NavBar","nav_bar","nav_list","page_items","to","page_item","login_items","HomePage","axios","defaults","baseURL","userRegister","createAsyncThunk","credentails","a","post","data","logIn","LoginPage","dispatch","useDispatch","useForm","register","handleSubmit","reset","errors","formState","onSubmit","placeholder","required","autoComplete","password","type","RegisterPage","addContactsRequest","createAction","addContactsSuccess","addContactsError","removeContactRequest","removeContactSuccess","removeContactError","getContactsRequest","getContactsSuccess","getContactsError","changeFilter","URL","getItems","state","contacts","items","createSelector","filter","normalizedFilter","toLowerCase","name","includes","Input","id","value","handleChange","options","input","onChange","event","pattern","title","Label","label","htmlFor","number","ContactForm","useState","setName","setNumber","nameInputId","uuidv4","numberInputId","useSelector","item","then","catch","error","addContact","target","form","preventDefault","checkName","newName","find","undefined","alert","button","ContactsPage","App","path","exact","createReducer","_","payload","isLoading","combineReducers","authSlice","createSlice","initialState","user","email","token","isLoggedIn","extraReducers","authOperations","fulfilled","action","rejected","message","store","configureStore","reducer","auth","autSlice","contactReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5300dfb2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav_bar\":\"NavBar_nav_bar__1hgvk\",\"nav_list\":\"NavBar_nav_list__1Jza-\",\"page_item\":\"NavBar_page_item__3dtJP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2T7aG\",\"item\":\"ContactList_item__3YsZK\",\"btn__delete\":\"ContactList_btn__delete__2u4p9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1fuOn\",\"button\":\"ContactForm_button__1MLZK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__3DcZT\",\"input\":\"Filter_input__2DoVp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__3RIox\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__3PNbO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Label_label__2bY5z\"};","import PropTypes from 'prop-types';\n\nimport s from './Container.module.css';\nconst Container = ({ children }) => {\n  return <div className={s.container}>{children}</div>;\n};\n\nContainer.propTypes = {\n  children: PropTypes.node,\n};\nexport default Container;\n","import Container from '../Container';\n\nconst Section = ({ children }) => {\n  return (\n    <section>\n      <Container>{children}</Container>\n    </section>\n  );\n};\nexport default Section;\n","import { NavLink } from 'react-router-dom';\nimport s from './NavBar.module.css';\n\nconst NavBar = ({ children }) => {\n  return (\n    <nav className={s.nav_bar}>\n      <ul className={s.nav_list}>\n        <li className={s.page_items}>\n          <NavLink to=\"/\" className={s.page_item}>\n            Home\n          </NavLink>\n          <NavLink to=\"/contacts\" className={s.page_item}>\n            Contacts\n          </NavLink>\n        </li>\n        <li className={s.login_items}>\n          <NavLink to=\"/login\">Login</NavLink>\n          <NavLink to=\"/register\">Register</NavLink>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default NavBar;\n","const HomePage = () => {\n  return <h1>Home page</h1>;\n};\n\nexport default HomePage;\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\n\nexport const userRegister = createAsyncThunk(\n  'auth/register',\n  async credentails => {\n    try {\n      const { data } = await axios.post('/users/signup', credentails);\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  },\n);\n\nexport const logIn = createAsyncThunk('auth/login', async credentails => {\n  try {\n    const { data } = await axios.post('/users/login', credentails);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n});\n","import { useForm, useFormState } from 'react-hook-form';\nimport { useDispatch } from 'react-redux';\nimport { logIn } from '../../redux/auth/auth-operations';\n\nconst LoginPage = () => {\n  const dispatch = useDispatch();\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm();\n\n  const onSubmit = data => {\n    dispatch(logIn(data));\n    reset();\n  };\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input placeholder=\"e-mail\" {...register('email', { required: true })} />\n      <input\n        autoComplete=\"off\"\n        placeholder=\"password\"\n        {...register('password', { required: true })}\n      />\n      {errors.password && <span>This field is required</span>}\n\n      <input type=\"submit\" />\n    </form>\n  );\n};\nexport default LoginPage;\n","import { useForm } from 'react-hook-form';\nimport { useDispatch } from 'react-redux';\nimport { userRegister } from '../../redux/auth/auth-operations';\nconst RegisterPage = () => {\n  const dispatch = useDispatch();\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm();\n\n  const onSubmit = data => {\n    dispatch(userRegister(data));\n    reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input placeholder=\"name\" {...register('name', { required: true })} />\n      <input placeholder=\"e-mail\" {...register('email', { required: true })} />\n      <input\n        autoComplete=\"off\"\n        placeholder=\"password\"\n        {...register('password', { required: true })}\n      />\n      {errors.password && <span>This field is required</span>}\n\n      <input type=\"submit\" />\n    </form>\n  );\n};\nexport default RegisterPage;\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const addContactsRequest = createAction('contacts/addContactsRequest');\nexport const addContactsSuccess = createAction('contacts/addContactsSuccess');\nexport const addContactsError = createAction('contacts/addContactsError');\n\nexport const removeContactRequest = createAction(\n  'contacts/removeContactRequest',\n);\nexport const removeContactSuccess = createAction(\n  'contacts/removeContactSuccess',\n);\nexport const removeContactError = createAction('contacts/removeContactError');\n\nexport const getContactsRequest = createAction('contacts/getContactsRequest');\nexport const getContactsSuccess = createAction('contacts/getContactsSuccess');\nexport const getContactsError = createAction('contacts/getContactsError');\n\nexport const changeFilter = createAction('contacts/filter');\n","import {\n  addContactsRequest,\n  addContactsSuccess,\n  addContactsError,\n  removeContactRequest,\n  removeContactSuccess,\n  removeContactError,\n  getContactsRequest,\n  getContactsSuccess,\n  getContactsError,\n} from './contacts-action';\nimport axios from 'axios';\n\nconst URL = 'http://localhost:4040';\n\nexport const fetchContacts = () => dispatch => {\n  dispatch(getContactsRequest());\n  axios\n    .get(`${URL}/contacts`)\n    .then(({ data }) => dispatch(getContactsSuccess(data)))\n    .catch(error => dispatch(getContactsError(error)));\n};\nexport const addContact = (name, number) => dispatch => {\n  const item = {\n    name,\n    number,\n  };\n  dispatch(addContactsRequest());\n  axios\n    .post(`${URL}/contacts`, item)\n    .then(({ data }) => dispatch(addContactsSuccess(data)))\n    .catch(error => dispatch(addContactsError(error)));\n};\n\nexport const removeContact = id => dispatch => {\n  dispatch(removeContactRequest);\n  axios\n    .delete(`${URL}/contacts/${id}`)\n    .then(() => dispatch(removeContactSuccess(id)))\n    .catch(error => dispatch(removeContactError(error)));\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getItems = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\n\nexport const getItemslength = state => {\n  const contacts = getItems(state);\n  return contacts.length;\n};\n\n// export const getFilteredContacts = (state) => {\n//   const contacts = getItems(state);\n//   const filter = getFilter(state);\n//   const normalizedFilter = filter.toLowerCase();\n//   return contacts.filter(({ name }) =>\n//     name.toLowerCase().includes(normalizedFilter)\n//   );\n// };\n\n// минимизация\nexport const getFilteredContacts = createSelector(\n  [getItems, getFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter),\n    );\n  },\n);\n","import PropTypes from 'prop-types';\nimport s from './Input.module.css';\nconst Input = ({ id, type, name, value, handleChange, options }) => {\n  return (\n    <input\n      className={s.input}\n      id={id}\n      type={type}\n      name={name}\n      value={value}\n      onChange={event => {\n        handleChange(event);\n      }}\n      pattern={options.pattern}\n      title={options.title}\n      required\n    />\n  );\n};\n\nInput.propTypes = {\n  id: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  handleChange: PropTypes.func,\n  options: PropTypes.shape({\n    pattern: PropTypes.string,\n    title: PropTypes.string,\n  }),\n};\nexport default Input;\n","import PropTypes from 'prop-types';\nimport s from './Label.module.css';\n\nconst Label = ({ id, title, children }) => {\n  return (\n    <label className={s.label} htmlFor={id}>\n      {title}\n      {children}\n    </label>\n  );\n};\n\nLabel.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string,\n  children: PropTypes.object,\n};\nexport default Label;\n","const options = {\n  name: {\n    pattern: \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\n    title:\n      \"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\",\n  },\n  number: {\n    pattern: '+?d{1,4}?[-.s]?(?d{1,3}?)?[-.s]?d{1,4}[-.s]?d{1,4}[-.s]?d{1,9}',\n    title:\n      'Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +',\n  },\n};\n\nexport default options;\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from '../../redux/contacts/contacts-operations';\nimport { getItems } from '../../redux/contacts/contacts-selectors';\n\nimport { v4 as uuidv4 } from 'uuid';\nimport s from './ContactForm.module.css';\nimport Input from '../Input';\nimport Label from '../Label';\nimport options from '../options';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const nameInputId = uuidv4();\n  const numberInputId = uuidv4();\n\n  const contacts = useSelector(getItems);\n  const dispatch = useDispatch();\n  const onSubmit = () => dispatch(addContact(name, number));\n  const handleChange = event => {\n    const { name, value } = event.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    const checkName = newName => contacts.find(({ name }) => name === newName);\n\n    if (!checkName(name) ?? checkName(name) !== undefined) {\n      onSubmit(name, number);\n      reset();\n      return;\n    }\n    alert(`${name} is already in contacts`);\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={s.form} onSubmit={handleSubmit} autoComplete=\"off\">\n      <Label id={nameInputId} title=\"Name\">\n        <Input\n          id={nameInputId}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          handleChange={handleChange}\n          options={options.name}\n        />\n      </Label>\n      <Label id={numberInputId} title=\"Number\">\n        <Input\n          id={numberInputId}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          handleChange={handleChange}\n          options={options.number}\n        />\n      </Label>\n      <button className={s.button} type=\"submit\">\n        add Contact\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","// import { useSelector, useDispatch } from 'react-redux';\n\nimport ContactForm from '../ContactForm';\nimport ContactList from '../ContactList';\nimport Filter from '../Filter';\nconst ContactsPage = () => {\n  const contactsLength = 0;\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      {contactsLength > 0 ? (\n        <>\n          <h2>Contacts</h2>\n          <Filter />\n          <ContactList />\n        </>\n      ) : (\n        <>\n          <h2>Phone book is emoty</h2>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default ContactsPage;\n","// import { useEffect } from 'react';\n// import { useSelector, useDispatch } from 'react-redux';\nimport { Switch, Route } from 'react-router';\n// import { getItemslength } from '../../redux/contacts/contacts-selectors';\n// import { fetchContacts } from '../../redux/contacts/contacts-operations';\n\n// import s from './App.module.css';\nimport Section from '../Section';\nimport NavBar from '../NavBar';\n\n//Page\nimport HomePage from '../Page/HomePage';\nimport LoginPage from '../Page/LoginPage';\nimport RegisterPage from '../Page/RegisterPage';\nimport ContactsPage from '../Page/ContactsPage';\n//\n\n// import ContactForm from '../ContactForm';\n// import ContactList from '../ContactList/';\n// import Filter from '../Filter';\n\nconst App = () => {\n  // const contactsLength = useSelector(getItemslength);\n  // const dispatch = useDispatch();\n\n  // useEffect(() => dispatch(fetchContacts()), [dispatch]);\n  return (\n    <>\n      <Section>\n        <NavBar />\n      </Section>\n\n      <Switch>\n        <Route path=\"/\" exact>\n          <Section>\n            <HomePage />\n          </Section>\n        </Route>\n        <Route path=\"/register\">\n          <RegisterPage />\n        </Route>\n        <Route path=\"/login\">\n          <Section>\n            <LoginPage />\n          </Section>\n        </Route>\n        <Route path=\"/contacts\">\n          <Section>\n            <ContactsPage />\n          </Section>\n        </Route>\n      </Switch>\n\n      {/* \n      <h1 className={s.title}>Phonebook</h1>\n      <ContactForm />\n\n      {contactsLength > 0 ? (\n        <>\n          <h2 className={s.title}>Contacts</h2>\n          <Filter />\n          <ContactList />\n        </>\n      ) : (\n        <>\n          <h2 className={s.title}>Phone book is empty</h2>\n        </>\n      )} */}\n    </>\n  );\n};\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\n\nimport {\n  addContactsRequest,\n  addContactsSuccess,\n  addContactsError,\n  removeContactRequest,\n  removeContactSuccess,\n  removeContactError,\n  getContactsRequest,\n  getContactsSuccess,\n  getContactsError,\n  changeFilter,\n} from './contacts-action';\n\nconst items = createReducer([], {\n  [getContactsSuccess]: (_, { payload }) => payload,\n  [addContactsSuccess]: (state, { payload }) => [...state, payload],\n  [removeContactSuccess]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst isLoading = createReducer(false, {\n  [addContactsRequest]: () => true,\n  [addContactsSuccess]: () => false,\n  [addContactsError]: () => false,\n\n  [removeContactRequest]: () => true,\n  [removeContactSuccess]: () => false,\n  [removeContactError]: () => false,\n\n  [getContactsRequest]: () => true,\n  [getContactsSuccess]: () => false,\n  [getContactsError]: () => false,\n});\n\nconst error = createReducer(null, {\n  [addContactsError]: (_, { payload }) => payload,\n  [addContactsRequest]: () => null,\n\n  [removeContactError]: (_, { payload }) => payload,\n  [removeContactRequest]: () => null,\n\n  [getContactsError]: (_, { payload }) => payload,\n  [getContactsRequest]: () => null,\n});\n\nconst filter = createReducer('', {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n  isLoading,\n  error,\n});\n","import { createSlice } from '@reduxjs/toolkit';\n\nimport * as authOperations from './auth-operations';\n\nconst initialState = {\n  user: { name: null, email: null },\n  token: null,\n  isLoggedIn: false,\n  error: null,\n};\n\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  extraReducers: {\n    [authOperations.userRegister.fulfilled](state, action) {\n      state.user = action.payload.user;\n      state.token = action.payload.token;\n      state.error = null;\n    },\n    [authOperations.logIn.fulfilled](state, action) {\n      state.user = action.payload.user;\n      state.token = action.payload.token;\n      state.isLoggedIn = true;\n      state.error = null;\n    },\n    [authOperations.logIn.rejected](state, action) {\n      state.isLoggedIn = false;\n      state.error = action?.error?.message;\n    },\n  },\n});\n\n// const user = createReducer(initialState, {\n//   [registerSuccess]: (state, { payload }) => [state, ...payload],\n// });\n\n// const isLoggedIn = createReducer(false, {\n//   [registerSuccess]: () => true,\n//   [registerRequest]: () => false,\n//   [registerError]: () => false,\n// });\n\n// const error = createReducer(null, {\n//   [registerError]: (_, { payload }) => payload,\n//   [registerRequest]: () => null,\n// });\n\n// export default combineReducers({\n//   user,\n//   isLoggedIn,\n//   error,\n// });\n\nexport default authSlice.reducer;\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport {\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n\nimport contactReducer from './contacts/contacts-reducer';\nimport autSlice from './auth/auth-slice';\nconst store = configureStore({\n  reducer: {\n    auth: autSlice,\n    contacts: contactReducer,\n  },\n  middleware: getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './components/App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}